let arr: string []
let arr2: Array <string>
let arr3: ( string | number ) []
let arr4: Array <string | number>

함수 매개변수를 처리하는 방법을 제외하면 
call과 동일함 call은 일반적인 함수와 같이
매개변수를 직접 받지만 apply 배열로 받는다 !!!!!

update.call(green, 1998, "teacher")
update.apply(green, [1998, "teacher"])

bind()
함수에서 사용할 this 영구적으로 저장
const updatebella = 함수.bind(this대상객체)
updatebella(1980, "police");

Enum 열거형 타입
숫자 혹은 문자열 값 집합에 이름을 부여할 수 있는 타입
값의 종류가 일정한 범위로 정해져 있는 경우 유용하다.

interface 타입스크립트의 여러 객체를 정의하는 일종의 규칙이며 구조이다.
1. 객체의 타입정의
객체타입의 interface
interface 인터페이스이름 {
	readonly key: key 타입;
	key: key 타입;
}

2. 함수의 타입정의
함수타입의 interface
interface 인터페이스 이름 {
	호출 시그니쳐정의
	(parameter: paremetertype): return type
}
3. 클래스의 타입정의

클래스 
객체를 생성해주는 템플릿 !!!
객체의 설계도
데이터는 들어있지않다

let user1 = {
	name: "a",
	age: 30
}
let user2 = new User();

class 클래스명User {
	//생성자
	construtor(name, age){
		this.name = name;
		this.age = age;
	}
	//method
	speak(){
		console.log(`${this.name}: hello`)
	}

객체
클래스를 사용해서 실제 만드는 것




















