상태관리
React --- SPA
state ---> 업데이트 되어야만 리렌더
state = 10
var ---> 업데이트 되어도 리렌더 되지않는다.
var = 10
리렌더 될 때 다시 초기화
ref ---> 마운트 되었을 때부터 언마운트 될 때까지 유지되는 값

useState() --> [ 상태,상태를 업데이트 해주는 함수 ]
상태 = 20 () //불가능하다 ! 상태를 변경하기 위해서는 상태를 업데이트 해주는 함수를 사용해서 변경
리렌더
useReducer() 
useRef()
useMemo()
useCallback()
useEffect()

컴포넌트
프로그래밍에서 재사용이 가능한 각각의 독립된 모듈

jsx 구문
태그는 하나만 사용해야한다
태그는 꼭 닫혀있어야한다
jsx 구문에서 자바스크립트 값 사용하기		//삼항연산자 사용
{ isLogin ? "true" : "false" }
<div className></div>			//react에서 스타일 줄 때는 class가 아닌 className으로
인라인 스타일 작성 시 객체 형태로 작성
html
<div style="font-size: 24px"></div>
jsx
1) 바로 style 태그에 입력
<div style={{"font-size: 24px"}}></div>
2) 변수로 선언 후 입력
const styleobject = {
	fonsSize: "42px"
}
<div style={styleobject }></div>

return (
	<>
		<div></div>
		<div></div>
		<img src=""/>
	</>
)

onChange 이벤트


상태만들기 2
useState(상태초기값); ---> [state, setState]
setState(상태값)
useReducer(리듀서함수, 상태초기값) ---> [상태, dispatch]		//useReducer로 만든 상태는 직접 업데이트가 불가능하다
dispatch() 를 해주면 ---> 리듀서함수가 호출(상태가 업데이트 되는 경우)
요청에 따라 상태를 업데이트 하도록 구현

1
+, -
두가지
더하기 요청이 왔을 때 1씩 더한다
빼기 요청이 왔을 때 1씩 빼준다

function reducer(state, action){
	switch(action.type){
		case "increase":
		return state+1;
		case "decrease":
		return state-1;
	}
}
useReducer(reducer, 0) ---> [state, dispatch함수]
dispatch({type: "increase"})


useState
useReducer
사용방법 암기

