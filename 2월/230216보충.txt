훅함수
useState()
useReducer(reducer, state)
---> [state, dispatch]
useRef(1) ---> ref객체 ---> { current: 1 }
마운트 되었을 때부터 언마운트 될 때까지 ref.current 값은 유지가 된다.
변수는 리렌더 될 때마다 초기화된다.

React

데이터 저장소
state = 10
setState(10)
상태 ---> 변경될 때 리랜더링
변수 ---> 리랜더될 때 초기화
러프 ---> 마운트 될 때부터 언마운트 될 때까지 유지된다. 변경되어도 리렌더 되지 않는다.
{  current: 10 }
ref.current
function showName(){
	let number = 10;
	number++;
	console.log(number)
}
showName();
showName();

useEffect(()=>{},[])
마운트 : 처음 나타났을때
언마운트 : 사라질때
업데이트 될 때(특정 props가 변경, 상태가 변경 )

useEffect(()=>{
console.log("화면에 나타남");
	return () => {
		console.log("화면에서 사라짐");
	}
}, [])

useEffect를 사용하면 마운트/언마운트/업데이트시 할 작업 설정하기
useEffect(()=>{
	//마운트 될 때 해야할 작업
	return ()=>{
	//언마운트 될 때 해야할 작업
	}
},[value])

Context API

1. Context 생성하기
const UserContext = React.createContext(초기값)
const UserContext = createContext(초기값)
const UserDispatch = createContext(null)

2. Context 사용하기
useContext(UserContext);

3. Context 값 변경해서 사용하기
<UserContext.Provider value="변경할 값">
<App/>
</UserContext.Provider>

















