함수 오버로드
이름은 같고 매개변수 타입과 반환타입이 다른 여러 함수를 만들 수 있다
다양한 구조의 함수를 생성하고 관리할 수 있다
선언부
function add(a: string, b: string):string;
function add(a: number, b: number):number;
function add(a: any, b: any):any {
	return a+b
}
구현부

함수 
function add(a,b){
	return a+b
}
리턴타입 지정시 리턴이 없는 경우 void
function add(a:number, b:number):number{
	return a+b	
}
let add: (a: number, b: number) => number;
add = function(a,b){
	return a+b
}
add = (a,b) => { return a+b }
함수에서 사용할 this를 지정
function printuser(){
	console.log(this.name)
}
green = {name: "green", age: 30}
printuser();
printuser.call(green,30,true);
printuser.apply(green,[30,true]);
call()
apply()
bind()


Generic 제네릭
재사용을 목적으로 함수나 클래스의 선언 시점이 아닌 사용시점에 타입을 선언
타입을 인수로 받아서 사용
- 타입변수는 사용자가 제공한 타입으로 변환될 식별자이다.
function getSize(arr:number [] | string [] | boolean [] | object []): number{
	return arr.length;
}
//제네릭 사용
funcntion getSize<T>(arr: T[]):number{
	return arr.length;
}

const arr1 = [1,2,3];
getSize<number>(arr1) //3
const arr2 = ["a","b","c"]
getSize<string>(arr2) //
const arr3 = [false, true, true, false]
getSize<boolean>(arr3) //
const arr4 = [{},{name:"g",{},{},{}}]
getSize<object>(arr4)

제네릭 제약조건
T extends U
ex> T string과 number만 허용하겠다
<T extends number | string>
<T extends {name:string}>
type U = string | number | boolean
interface Mytype<T extends U> {
	name: string;
	value: T
}
const data:Mytype<number> = {
	name: "A",
	value: 123
}
const data:Mytype<string> = {
	name: "A",
	value: "aaa"
}
const data:Mytype<boolean> = {
	name: "A",
	value: true
}

새로운 interface 3개 생성
새로운 interface 타입의 객체를 3개 생성
printColor() 함수 구현 ---> 객체타입을 매개변수로 받아서 객체.color를 콘솔에 출력해준다.

인터페이스 확장
interface IAnimal {
	name: string
}
interface ICat extends IAnimal {
	sound(): string
}
class Cat implements ICat {
	name: string;
	constructor(name){
		this.name = name;
	}
	sound(){
		return "야옹";
	}
}
같은 이름의 interface를 여러개 만들 수 있다.
기존에 만들어진 interface에 내용을 추가하는 경우 유용하다
interface IName {
	name1: string;
	age: number;
}
interface IName {
	name2: string;
}
const namename: IName = {
	name1: "A",
	age: 20,
	name2: "B"
}

클래스
접근제한자
public :
의미 -> 어디서나 자유롭게 접근가능(생략가능)
클래스 내부에서 접근, 인스턴스 접근 가능
범위 -> 속성, 메소드
protected
의미 -> 내 클래스 내부, 자식 클래스 내부에서 접근 가능 (인스턴스 접근 안됨)
범위 -> 속성, 메소드
private
의미 -> 내 클래스 내부에서 접근 가능(자식 클래스 접근 안됨, 인스턴스 접근 안됨)
범위 -> 

클래스 ----> 객체(인스턴스)
class Animal {
	kind: string
	constructor(kind){
		this.kind = kind;
	}
}
class Cat extends Animal {
	public name: string;
	public age: number
	constructor(name, age, kind){
		super(kind);
		this.name = name;
		this.age = age;
	}
	public printName(){
		console.log(this.name);
		this.sound();
	}
	public sound() {
		console.log("야옹")
	}
}
const cat1 = new Cat("레오", 4, "고양이");
인스턴스에서 접근
cat1.sound()
cat1.name

필드 메소드

정적멤버 - 정적필드, 정적메소드
인스턴스 멤버 - 인스턴스필드, 인스필드메소드


클래스 필드, 메소드
클래스 --->
객체(클래스의 인스턴스) ---> 인스턴스 멤버
let cat = new Cat("레오")
cat.name
클래스 ---> 정적 멤버

abstract 키워드
추상클래스
상속만 가능하고 인스턴스(객체)를 생성할 수 없다.

추상메소드
메소드의 이름만 선언하고 구체적인 기능은 상속받는 쪽에서 구현한다.
상속받는 클래스는 모두 다 같은 이름의 메소드를 가지며 구현은 각각 다르게 할 수 있다.

abstract class Person {
	name: string;
	construtor(name){
		this.name = name;
	}
	//추상메소드
	abstract work(): void;
}
const person1 = new Person()
class Teacher extends Person {
	work():void {
		console.log("가르키는 일을 합니다.")
	}
}
class Engineer extends Person {
	work(): void{
		console.log("엔지니어")
	}

}








