git에서 가져오기
- 저장소에서 원하는 파일 선택
- code Clone 주소 복사
- 폴더 생성
- 폴더 안에서 마우스 우클릭 git bash here
- $ 뒤에 git clone 적고 마우스 우클릭 눌러서 paste로 붙여넣기
- 그러면 파일 저장완료

폴더를 열어서 .gitignore을 켜면 /node_modules이 빠져있는 것을 볼 수 있다.
크기가 커서 git에 올리지 않기 때문에 파일을 다운받고 사용 전에
terminal에 npm install을 이용해서 node를 설치해줘야한다.


https://create-react-app.dev/docs/getting-started

리액트 
컴포넌트에는 함수형과 클래스형 두가지로 이루어진다

let aa = "안녕"
undefined
aa
'안녕'
aa = "aaa"
'aaa'
aa
'aaa'

변수로 값을 담을 수 있고 변경할 수 있다
하지만 react에서는 값을 담고 나서는 변경할 수 없다.


[ {id:1, text: "할일1"},
{id:2, text: "할일2"},
{id:3, text: "할일3"}	
]
const id = 1
const newArray = todoLists.filter(todo => todo.id !== id)

filter는 배열을 돌면서 조건에 맞는 값만 출력시켜준다.
1 !== 1	값이 1이고 1이 같지 않을 때, 1이 같으면 false 
1 == 1	값이 1이고 1이 같을 때, 1이 같으면 true

HeaderInput
props = {
	inputText: "",
	onChange: f,
	onAddTodo: f
}

App.js
App 컴포넌트
	HeaderInput 컴포넌트
<HeaderInput
inputText={todoState.inputText}
onChange={onChange}
onAddTodo={onAddTodo}/>
props = {
	inputText: "",
	onChange: f,
	onAddTodo: f
}

function inputText(props){
	const { inputText, onChange, onAddTodo } = props
}

function inputText({ inputText, onChange, onAddTodo }){
	const = props
}


react 바로 git에 올리기

terminal에서 ctrl+c

일괄 작업을 끝내시겠습니까 (Y/N)? y									//작업을 끝내야 업로드 가능
PS D:\01-STUDY\kyh\09.REACT\todolist_react> git init							//git으로 변경
Reinitialized existing Git repository in D:/01-STUDY/kyh/09.REACT/todolist_react/.git/
PS D:\01-STUDY\kyh\09.REACT\todolist_react> git add .						//git에 추가
warning: in the working copy of 'src/App.css', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'src/App.js', LF will be replaced by CRLF the next time Git touches it
PS D:\01-STUDY\kyh\09.REACT\todolist_react> git commit -m "기본투두리스트"				//이름설정
[master 0b8856f] 기본투두리스트
 5 files changed, 179 insertions(+), 16 deletions(-)
 create mode 100644 src/components/HeaderInput.js
 create mode 100644 src/components/TodoTotal.css
 create mode 100644 src/components/TodoTotal.js
 create mode 100644 src/components/Todolists.js
PS D:\01-STUDY\kyh\09.REACT\todolist_react> git branch -M main					//master 에서 main으로 변경해줘야한다.
PS D:\01-STUDY\kyh\09.REACT\todolist_react> git remote add origin https://github.com/hanyoko/todolist.git	//git에 등록
PS D:\01-STUDY\kyh\09.REACT\todolist_react> git push -u origin main					//git에 업로드
Enumerating objects: 31, done.
Counting objects: 100% (31/31), done.
Delta compression using up to 4 threads
Compressing objects: 100% (31/31), done.
Writing objects: 100% (31/31), 309.86 KiB | 4.62 MiB/s, done.
Total 31 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), done.
To https://github.com/hanyoko/todolist.git
 * [new branch]      main -> main
branch 'main' set up to track 'origin/main'.

완료
but, nodelist 는 올라가지않는다.



컴포넌트
프로그래밍에 있어서 재사용이 가는ㅇ한 각각의 독립적인 모듈을 뜻합니다.
컴포넌트 기반 프로그래밍을 하면 마치 레고 블럭처럼 이미 만들어진 컴포넌트들을 조합하여 화면을 구성합니다.
웹 컴포넌트는 이러한 컴포넌트 기반 프로그래밍을 웹에서도 적용할 수 있도록 w3c에서 새로 정한 규격이다. 

1) 함수형 컴포넌트
- 선언하기가 편리함
- 메모리자원 사용도도 클래스형보다 작음
- 프로젝트 완성 후 빌드한 후 배포할 때 결과물의 파일크기가 더 작
import React from 'react';

function FuncComponent(){
	return (
		<div></div>
	)
}
const FuncComponent = () => {
	return (
		<div></div>
	)
}
export default FuncComponent;

2) 클래스형 컴포넌트
클래스형 컴포넌트는 render() 함수가 필수적이며 그 안에 보여주어야 할 jsx를 반환해줌

import React, { Component } from "react"
class ClassComponent extends Component {
	render(){
		return(
			<div></div>
		)
	}
}

export default ClassComponent;


* 클래스형 컴포넌트 state
생성자메소드인 constructor() 메소드를 사용하여 state 작성.
클래스형 컴포넌트에서 constructor() 작성할 때 반드시 super(props)를 호출해주어야한다.
super(props)가 호출되면 현재 클래스형 컴포넌트가 상속받고 있는 리액트의 Component 클래스가 지닌 생성자 함수가 호출된다.

자바스크립트 class 구문 복습 !




