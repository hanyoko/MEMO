컴포넌트
재상용이 가능한 독립된 모듈

1) 함수형 컴포넌트
const Funcomponent = () => {
	return(
		//jsx구문
	)
}
function Funcomponent(){
	return (
		//jsx구문
	)
}

export default Funcomponent;
* props => propertries(속성들)의 줄임말 컴포넌트의 속성을 설정할 때 사용
해당 컴포넌트를 사용하는 부보 컴포넌트에서 설정할 수 있음
- 컴포넌트 태그 사이에 내용은 children으로 전달된다
사용
ex>
function App(){
	return (
		<Funcomponent name="aaaa">안녕</Funcomponent>
	)
}

2) 클래스형 컴포넌트
import React, { Component } from 'react';
class ClassComponent extends Component {
	render(){
		return (
			<div></div>
		)
	}
}

state 상태
1) 함수형
useState() 훅함수를 사용
useState(초기값) => return array [상태, 상태업데이트함수]
const [ number, setNumber ] = useState(0);
setNumber(10)

render => 화면에 그린다
리렌더링
1) 부모요소가 주는 props가 변경되었을 때
2) 상태가 변경되었을 때

객체 object
물리적으로 존재하거나 추성적으로 생각할 수 있는 것중에서 속성을 가지고 있고 다른 것과 식별 가능한 것
-> 이름(key)와 값(value)으로 구성된 속성(property)의 집합이다.
고양이
속성(property)
cat.name = "콩이"
cat.family = "코리안 숏 헤어"
cat.age = 1
cat.weight = 1000
속성의 값이 함수인 속성 -> 메소드(method)
메소드(method)
cat.eat()
cat.sleep()
cat.play()
객체 리터럴 문법
let cat = {};
객체 생성자 문법
let cat = new Object();
let abc = "weight";
let cat = {
	name : "콩이",
	family : "코리안 숏 헤어"
	abc : 1000,
	[abc] : 1000	//변수의 값을 담고 싶을 때
}
cat.age = 1;
cat.name
cat['name']

ex)

//cat 객체 생성하기
        let abc = "weight";
        let cat1 = {
            name : "콩이",
            family : "코리안 숏 헤어",
            abc : 1000,
        }
        console.log(cat1);

{name: '콩이', family: '코리안 숏 헤어', abc: 1000}
abc : 1000
family : "코리안 숏 헤어"
name : "콩이"
[[Prototype]] : Object

//cat 객체 생성하기
        let abc = "weight";
        let cat1 = {
            name : "콩이",
            family : "코리안 숏 헤어",
            [abc] : 1000,
        }
        console.log(cat1);

{name: '콩이', family: '코리안 숏 헤어', weight: 1000}
family: "코리안 숏 헤어"
name: "콩이"
weight: 1000
[[Prototype]]: Object


lodash -> CDN copies -> copy html
<script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>

let clone3 = _.cloneDeep(user2);	//깊은 복사
를 사용하고 싶을 때



