<div>
<ul><li><h1~h6>
<a><span><input><select><textarea>
<button>
<i><strong><mark><ins><del>
<img>

시멘틱 태그
 => 정해져있는 위치는 없고 본인이 생각했을 때 필요한 자리에 넣어주면 된다.
 => 시멘틱 태그를 이용하지않고 div만 이용해서 만들어도 상관없다.
<header><main><footer><nav><address>
<section>

display: block이 들어가는 태그들
div, p, ul, li, dl, dt, dd, header, main
footer, address, section
- 한행을 다 차지
- width 속성과 height 속성을 지정할 수 있다.
- 위/아래/좌/우 padding, margin 지정할 수 있다.


a, img, span, i, strong, input, button, select
- block이 들어가지 않는 태그들.
- block 속성이 없어서 한 줄로 배치가 된다
* input, button, select에는 inline-block 속성이 들어있긴 하지만 block 상태가 아니라서 줄이 구분되지않는다.

a, img, span, i, strong
display: inline
- 가로로 배치
- width와 height를 지정할 수 없다.

input, button, select
display: inline-block
- 가로로 배치
- width와 height를 지정할 수 있다.
- padding/margin 지정할 수 있다.
- 글자처럼 인식이 되기 때문에 부모요소에 text-align 속성을 주면 정렬이 가능하다.

float 레이아웃 잡기
float: left
float: right
clear: left/right/both
ul::after {
	content: "";
	display: block;
	clear: both;
}

flex
* container
display: flex; 를 입력했을 때,
default -> flex-direction: row;
default -> flex-wrap: nowrap;
default -> justuify-content: flex-start;
default -> align-items: stretch;
1. flex-direction 아이템들의 배치 방향 지정 - default: row
row / row-reverse / column / column-reverse
2. justify-content 주축방향으로 아이템들을 정렬 - default: flex-start
flex-start / flex-end / center / space-between / space-around / space-evenly
3. align-items 교차축 방향으로 아이템들을 정렬 (한줄일때) - default : stretch
flex-start / flex-end / center / stretch
4. flex-wrap 주축방향으로 아이템 배치를 한줄, 여러줄 지정 - default: nowrap
wrap / nowrap / wrap-reverse
5. align-content 교차축 방향으로 아이템을 정렬 (여러줄일때)
flex-start / flex-end / center / space-between / spave-around / space-evenly

*item
1. order -> default: 0
작은 순번대로 배치
2. align-self 
container에게 지정한 align-items를 선택한 요소만 다시 지정
flex-start / flex-end / center / stretch

* css 변수 사용하기
:root {
	--main-color1: red;
	--small-font: 14px;
	--middle-font: 18px;
	--large-font: 32px;
	--default-padding: 16px;
}

*css 함수
var(--main-color1) -> 이렇게 적어주면 root 값에 입력한 red가 적용된다.
var(--small-font) -> 이렇게 적어주면 root 값에 입력한 14px이 적용된다.
calc(100% - 60px) 자동으로 값을 계산해주는 함수
translate(50px, 50px)
rgba(r,b,b,a)


* transform 요소의 변형
translate(x, y)
translateX(x)
translateY(y)
scale(x,y), scale(1), scaleX
skewX(45deg), skewY(45deg), skew(x,y)
rotate(45deg)
matrix(a,b,c,d,x,y) -> 보통 직접 계산하지는 않고 사이트를 이용해 만들고 값을 복사해서 온다.
transform: translate(50px,50px) scale(2)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        div {
            width: 100px;
            height: 100px;
            background-color: tomato;
            transition: 0.5s; /* hover 값에 주면 마우스를 올릴 때만 적용되고 마우스를 올리지 않으면 시간간격없이 돌아가서 자연스럽지않다. */
        }
        div:hover {
            transform: translate(20%,20%) scale(1.2) rotate(45deg);
        }
    </style>
</head>
<body>
    <div></div>
</body>
</html>

https://blog.naver.com/pink_candy02 프론트엔드 자료 (강사님 블로그)

transition 
* transiton-duration 동작시간
* transiton-delay 지연시간
* transiton-property 속성지정
* transiton-timing-function 속도지정

div:hover {
            transform: translateZ(50px;)
        }
Z축을 사용하기 위해서는 perspective를 줘야한다.
-> 값이 작을수록 효과는 크다.

@keyframes name {
	0%{
		left: 0;
	}
	100%{
		left: 500px;
	}
}
div {
	animation: name 1s infinite
}

★★★★★ 반응형 웹 ★★★★★ 
768px 이하 -> 휴대폰으로 본다
1024px 이하 -> 태블릿으로 본다
@media screen and (min-width: 360px) and (max-width: 768px) {
	
}
max-width: 1024px -> 최대 1024px이라는 뜻이니 => 1024px 미만
min-width: 360px -> 최소 360px이라는 뜻이니 => 360px 이상



-----------------------------------------------------------------------

SCSS

scss에서 만들어지는 css 파일 저장경로 바꾸기
파일 -> 기본설정 -> 설정 -> sass 검색 -> live sass compiler 클릭 -> formats -> settings.json에서 편접
 => "savePath": "~/../css" 저장하면 scss 폴더가 들어있는 폴더 내에 있는 css 폴더로 자동 생성되는 css 파일이 저장된다.

name.scss 파일을 만들고, live sass compiler를 다운받고 watch sass를 누르면 
css 파일이 생성된다.

ul {
    background-color: red;
    li {
        list-style: none;
    }
}
이렇게 scss 파일에 입력하면

ul {
  background-color: red;
}
ul li {
  list-style: none;
}/*# sourceMappingURL=text.css.map */

css 파일에 자동으로 입력되어 생성된다.

.section {
    width: 100%;
    .list {
        padding: 10px;
        li{
            background: pink;
        }
    }
}

->
.section {
  width: 100%;
}
.section .list {
  padding: 10px;
}
.section .list li {
  background: pink;
}/*# sourceMappingURL=text.css.map */


http://www.sassmeister.com scss 만드는 사이트

scss 중첩 사용하기
하위요소 스타일 작성
- 상위요소 {} 안에 작성
- & 선택한 요소 자신

ex) div {
	h1{}
	> div{             /* 하위요소가 아닌 자식요소를 선택할 때는 태그 앞에 >를 붙여주면된다. */
		a {
		}
	}
}
ul {
	li{
		font-size: 14px;
		&:nth-child(1)
		&:hover {}
		&::after {}
	}
}

<body>
    <div>
        <h1>green</h1>
        <ul>
            <li class="fs-small">menu1</li>
            <li class="fs-medium">menu2</li>
            <li class="fs-large">menu3</li>
            <li>menu4</li>
        </ul>
        <button class="btn">btn</button>
        <button class="btn active">btn</button>
    </div>
</body>

.fs {
    &-small {
        font-size: 14px;
    }
    &-medium {
        font-size: 18px;
    }
    &-large {
        font-size: 24px;
    }
}
앞에 fs를 가진 class에 입력할 때, &를 이용하여 중첩을 사용할 수 있다.

.fs-small {
  font-size: 14px;
}
.fs-medium {
  font-size: 18px;
}
.fs-large {
  font-size: 24px;
}
css에 나오게 되는 값


2개의 class가 입력된 button 부르기

.btn {
    width: 100px;
    height: 50px;
    background-color: lightblue;
    &.active {
        border-bottom: 3px solid red;
    }
}

.btn {
  width: 100px;
  height: 50px;
  background-color: lightblue;
}
.btn.active {
  border-bottom: 3px solid red;

시작하는 이름이 같은 스타일 지정하기
font-size, font-family, font-weight
padding-top, padding-bottom, padding-left, padding-right
- "-" 대신 : (띄어쓰기 작성)
font: {
	size: 20px;	
	family: "나눔 고딕";
	weight: bold;
}
class 이름의 시작이 같은 class 스타일 정의
fs-small / fs-medium
.fs {
	&-small {
		font-size: 16px;
	}
	&-medium {
		font-size: 16px;
	}
}

css 변수 사용
변수 선언
$width: 100px;
: root {
	--main-a: 14px;
}
font-size:var(--main-a)

scss 변수사용
1. 변수 선언
$width: 100px;
2. 변수 적용
li {
	width: $width;
}

3. 변수의 유효범위
선언된 블록{}내에서만 유효범위를 가짐.

4. !global 플래그
변수의 유효범위를 전역(global)로 설정

.list {
    $w: 100px !global;
    $h: 50px !global;
    li {
        width: $w;
        height: $h;
    }
}
.box {
    width: $w;
    height: $h;
}

.list li {
  width: 100px;
  height: 50px;
}

.box {
  width: 100px;
  height: 50px;
}

* @at-root 중첩 벗어나기
중첩 안에서 작성하지만 밖에서 사용 해야하는 경우
.list {
    $w: 100px;
    $h: 50px;
    li {
        width: $w;
        height: $h;
    }
    @at-root .box {
        width: $w;
        height: $h;
    }
}
.list에 입력된 변수를 사용하기 위해서 .list 안에 .box를 입력했지만 중첩을 벗어나기 위해 @at-root를 앞에 입력하면
변수는 사용하면서 중첩은 되지 않은 입력값을 확인할 수 있다. 

.list li {
  width: 100px;
  height: 50px;
}
.box {
  width: 100px;
  height: 50px;
}

