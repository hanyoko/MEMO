CSS
선택자 { 속성: 속성값; }
font-size
font-family 
...

1. 태그 선택자 ex) div { background: red; }

2. 아이디 선택자 (tagname)#idnameex)
#header { font-size: 14px; }
div#header 띄어쓰기하면 안된다. if, 띄어쓰기 하면 div 안에 있는 header를 찾는다.

3. 클래스 선택자 (tagname).classname
ex) .large { font-size: 24px; }
p.large

4. 모든 선택자 * ex) * { padding:0; margin:0; }
* 복합 선택자

5. 하위 선택자
선택자 선택자
ex) #header li { width: 25%; }
div	h2(상위요소)
(부모요소)p(자식요소)
	ul	li	p(하위요소)
		li

6. 자식 선택자
선택자A > 선택자B
ex) #header > p { width: 200px }

7. 형제선택자
1) 인접 형제 선택자 선택자A + 선택자B 
ex) h2 + p { background: yellow; }
2) 일반 형제 선택자 선택자A ~ 선택자B
ex) h2 ~ p { background : red; }

div	h2(1)
	p(2)
	p(3)
	p(4)
이렇게 짜여진 태그에서
h2+p를 입력하면 (1)과(2)가 선택되는데
h2~p를 입력하면 (1)(2)(3)(4)가 입력된다.

8. 속성 선택자 [id]
div[id]
input[type="text"]

9. ★★★★★가상 클래스 선택자★★★★★
1) 동적 선택자
:link 선택자가 방문하지 않은 링크일 때
ex) a:link { color: yellow; }
:visited 선택자가 방문한 링크일 때
ex) a:visited { color: blue; }
:hover 선택자에 마우스가 올라와 있을 때 ex) a:hober { color: red; } /* a:hover 띄어쓰기하면 안 된다.*/
:active 선택자가 클릭된 상태일 때
ex) a:active { color: pink; }
:focus 선택자에 포커스가 들어와 있을 때
ex) #userid:focus { background: yellow; }


ul>(li>a{menu$})*4

    <ul>
        <li><a href="">menu1</a></li>
        <li><a href="">menu2</a></li>
        <li><a href="">menu3</a></li>
        <li><a href="">menu4</a></li>
    </ul>

- 이미 방문했던 링크는 색이 바뀌며 표시되어있다.

    <style>
        a { color: #333;}
        a:link { color: blue; } /*링크는 파란색*/
        a:visited { color: red; }  /*방문한 링크는 빨간색*/
        a:hover { color: yellow; } /*마우스를 올리면 노란색*/
        a:active { color: green; } /*마우스를 누르고 있으면 초록색*/
    </style>

- 주로 hover를 사용한다. 


    <div>
        <h2 title="하하하">h2입니다.</h2>
        <p>p입니다.</p>
        <p title="호호호">p입니다.</p> 
        <ul>
            <li>li입니다.
                <p>li안에 p입니다.</p>
            </li>
            <li>li입니다.</li>
        </ul>
    </div>

        [title] {
            text-decoration: underline;
        }
title 태그를 가진 요소들만 줄이 생긴다.

        h2[title] {
            text-decoration: underline;
        }
h2중에 title 태그를 가진 요소만 줄이 생긴다.

        [title$="하"] {
            text-decoration: underline;
        }
title 태그를 가진 요소 중에 하로 끝나는 title         
	/*
	^= 시작하는 값 일치
	$= 끝나는 값 일치
	*= 포함하는 값 일치
	*/

        input[type=text] { width: 300px;}
input 태그에서 type이 text인 태그만 width 300px를 가진다

        input:focus {
            background: pink;
        }
input에 focus를 준다, 배경은 분홍색


2) 구조 가상 클래스 선택자
:first-child   /*선택자에 해당하는 모든 요소 중 첫번째 자식요소
:last-child   /*선택자에 해당하는 모든 요소 중 마지막 자식요소를 선택*/
:nth-child()   /*선택자에 해당하는 모든 요소 중 n번째 자식요소를 선택*/
:nth-child(odd)   /*선택자에 해당하는 모든 요소 중 홀수번째 자식요소를 선택*/
:nth-child(even)   /*선택자에 해당하는 모든 요소 중 짝수번째 자식요소를 선택*/
:nth-child(An+B)
:nth-child(1n+2)
:nth-of-type() type 중에 몇번째를 고를 때
ex) h2:nth-of-type(2) h2 중에서 두번째를 고를 때
ec) h2:nth-child(4) 요소들 중에서 4번째를 고를때
:only-child *띄어쓰기 해줘야한다

div	h2(1)
	p(2)	
	p(3)
	h2(4)   h2를 선택하고 싶을 때 :nth-child()를 이용해서 찾을 수 있다 ex) div>h2:ntf-child(4) /*but, h2에서는 두번째이지만 div의 자식요소 중에서는 네번째이기 때문에 (4)를 써야한다.*/
	p(5)

ul	li
	li
	li
	li
=> ul li:first-child를 입력하면 첫번째 li가 입력된다.

        #selector li:nth-child(3) {
            background: blueviolet;
        }
selector id를 가진 태그에 있는 li 중 세번째 li에 배경색 blueviolet을 준다.

div	h2(1)
	p(2)
	p(3)	
	h2(4)
	p(5)
:nth-of-type() type 중에 몇번째를 고를 때
ex) h2:nth-of-type(2) h2 중에서 두번째를 고를 때
ec) h2:nth-child(4) 요소들 중에서 4번째를 고를때


3) 부정 선택자
:not(선택자)   /*선택자에 해당하지 않는 모든 요소를 선택*/
ex) div:not(.left)
ex) div:not(:last-child)

        #selector li{
            display: inline-block;
        }
        #selector li:not(:last-child) {
            border-right: 1px solid red;
        }
selector Id를 가진 태그에 있는 li를 inline block으로 만들고
마지막 li를 제외하고 오른쪽 테두리에 1px 크기의 빨간색 선을 만든다.



4) 가상 요소 선택자
::after 콘텐츠 뒤에 위치하는 공간을 선택 content 속성과 함께 사용
        h1::after {
            content: url(./images/banner1.jpg);
        }
h1 안에 속한 content 뒤에 입력된다.

::before 콘텐츠의 앞에 위치하는 공간을 선택 content 속성과 함께 사용
p::after {
	content: "아카데미";
}
p::before {
	content: "재미있는";
}
<p>그린 컴퓨터</p>


        h1::before {
            content: "재미있는 ";
        }
style 안에 입력했을 때 h1 앞에 생기는 것이 아니라 h1 안에 속하게 된다.
::first-letter 콘텐츠의 첫 글자를 서택 *블럭 요소만 적용
div::first-letter {
	font-size: 24px;
}
        div::first-letter {
            font-size: 48px;
        }
content의 첫번째 글자 크기를 48px로 키운다

::first-line 콘텐츠의 첫 줄을 선택 * 블럭 요소만 적용
        div::first-line {
            background: pink;
        }
div 안에 있는 content의 첫번째 줄에 분홍색 배경을 입력한다.


display => block / inline-block / inline / none

float와 clear 속성을 사용한 레이아웃 지정
float
left / right
div

        #wrap { background: lightblue;}
        #wrap div {
            width: 200px;
            height: 200px;
            background: tomato;
            color: #fff;
            float: left;
        }
=> lightblue로 설정한 배경이 사라진다 why? 자식 요소의 배경 높이가 부모요소의 높이가 된다.


        #wrap div {
            width: 200px;
            height: 200px;
            background: tomato;
            color: #fff;
        }
        #box {
            height: 300px;
            background: lightgreen;
        }
    </style>
</head>
<body>
    <div id="wrap">
        <div>box1</div>
        <div>box2</div>
        <div>box3</div>
        <div>box4</div>
    </div>
    <div id="box">
        아래에 있는 div입니다.
    </div>

이렇게 코딩을 했을 때는 배경이 각각 생긴다.

이때 float를 사용하면 좌 또는 우로 정렬되면서 배치가 된다.


자식 요소에 float 요소를 적용하면 부모요소는 높이를 가질 수 없고 붕 떠 있는 상태로 유지된다.


    <style>
        li {float: left;}
    </style>
</head>
<body>
    <div>
        <ul>
            <li>menu1</li>
            <li>menu2</li>
            <li>menu3</li>
            <li>menu4</li>
        </ul>
        <div>div입니다.</div>
    </div>

float를 사용하면 모든 글자가 겹쳐서 나타난다.

그래서,
    <style>
        li { float: left;}
        ul::after {
            content: "ddd";
        }
    </style>
</head>
<body>
    <div>
        <ul>
            <li>menu1</li>
            <li>menu2</li>
            <li>menu3</li>
            <li>menu4</li>
        </ul>
        <div>div입니다.</div>
    </div>

::after { content: ""; } 을 사용해서 만들어야한다.

=>        ul::after {
            content: "";
            display: block;
            clear: left;
        }
가상의 요소를 만들어줌으로써 특정 태그 안에 불필요한 태그를 입력할 필요가 없다.


        #box div {
            width: 100px;
            height: 100px;
            background: yellow;
            float: left;
        }
        #box::after {
            content: "";
            display: block;
            clear: left;
        }

        <div id="box">div입니다.
            <div>box1</div>
            <div>boxu2</div>
            <div>box3</div>

        </div>

자식요소에게 float를 줬을 때는 부모요소에게
        #box::after {
            content: "";
            display: block;
            clear: left;
        }를 줘야한다 [그냥 암기]

