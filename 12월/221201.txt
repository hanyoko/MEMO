Promise 
프로듀서
let promise = new Promise(콜백함수)
new Promise((resolve, reject)=>{
	if(성공){ resolve(data);}
	else{reject(error);}
})
state - pending => resolve가 호출되면 fulfilled
		reject가 호출되면 rejected
result - undefined => resolve가 호출되면 value
		reject가 호출되면 error
소비자
then, catch, finally
then()메소드
promise.then(
	function(){},	//결과(result)를 다룹니다.
	function(){}	//에러(error)를 다룹니다.
)
ex)
let promise = new Promise((resolve, reject)=>{
	setTimeout(()=> resolve("완료"),1000)
})
promise.then(
	function(result){
		console.log(result);
	},
	function(error){
		console.log(error);
	}
)
promise.then((result)=>console.log(result))
.catch((error)=>console.log(error))
.finally(()=>{
	console.log("끝났어요")
})

async
await
프로미스 더 편하게 사용할 수 있다 !!!!!
async function myFun(){
	return Promise.resolve("안녕");
}
myFun().then(result=>console.log(result));

async function myFatch(){
	let result = await fetch("경로")
}

async function myFatch(){
	let promise = new Promise((resolve, reject)=>{
		setTimeout()=>resolve("완료"),1000)
	})
	let result = await promise;	//프로미스가 이행될 때까지 기다린다.
}
fetch("경로")
.then(result=>result.json())
.then(data=>console.log(data));

async function fetchFun(){
	try{
		let result = await fetch("경로");
		let data = await result.json();
		console.log(data);
	}
	catch(){
		console.log(err);
	}
}

클래스
객체 지향 프로그래밍에서 특정 객체를 생성하기 ㅜ이해 
변수와 메소드를 정의하는 일종의 틀이다.
객체를 정의하기 위한 상태(멤버변수)와 메소드(함수)로 구성된다.

템플릿
붕어빵틀 => 클래스

class Student {
	//생성자 - 객체의 초기화
	constructor(name, scroe1, score2){
		this.name = name;
		this.score1 = score1;
		this.score2 = score2;
	}
	//메소드 정의
	sayHi(){
		console.log(this.name);
	}
}
let stu1 = new Student("김그린",60,80);
let sty2 = new Student("이블루",70,90);

class Car

클래스 상속
정의된 클래스를 상속 받아서 새로운 클래스를 생성할 수 있다.
상속받은 부모에 해당하는 클래스에 정의된 변수, 함수 등
모든 특성을 그대로 상속받아 사용할 수 있다.
자식에 해당하는 클래스에서 추가적인 부분만 정의하면 된다.
extends
super => 부요클래스

class ChildClass extends Parent{

}

에러핸들링
try..... catch
try{
	//code
}
catch(err){

}

<script>
        try {
            console.log("try블럭 시작");
            say;
            console.log("try블럭 끝")
        }
        catch(err){
            console.log(err.name);
            console.log(err.message);
        }
        console.log("계속동작");
    </script>

try블럭 시작
trycatch.html:17 ReferenceError
trycatch.html:18 say is not defined
trycatch.html:20 계속동작


*****자바스크립트 모듈
모듈은 코드를 관리하는 가장 작은 단위
모듈을 이용하면 코드관리와 재활용이 편리해진다.
es6부터 import, export 문이 추가되었다.
자바스크립트 파일을 분리하고 사용하는 기술

export
export 지시자를 변수나 함수 앞에 붙이면
다른 외부 모듈에서 해당 변수나 함수를 import 해서 사용할 수 있다.

import
import 지시자를 붙이면 다른 외부 모듈을 가지고 와서 사용할 수 있다.

let state =
	newState = { members: ["member1","member2","member3"]} 
	{
	isLogin : false,
	members : ["member1","member2"]
	selectMember : {
		name: "김그린",
		age: 30
	},
	...newState
}

기본 내보내기 1개의 클래스, 1개의 함수
export default class App {

}

import App from "경로.js"

<div id="add">
	<div id="insertTodo"></div>
	<div id="listTodos"></div>
</div>

import
export
module

try{}
catch(e){}
finally{}



